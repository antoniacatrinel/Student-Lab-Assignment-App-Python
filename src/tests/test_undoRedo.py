from services.studentService import StudentService
from services.assignmentService import AssignmentService
from services.gradeService import GradeService
from repository.inmemory.studentRepo import StudentRepository
from repository.inmemory.assignmentRepo import AssignmentRepository
from repository.inmemory.gradeRepo import GradeRepository
from validation.validators import ValidatorStudent, ValidatorAssignment, ValidatorGrade
from services.undoRedoService import UndoRedoService
from domain.student import Student
from domain.assignment import Assignment
from domain.grade import Grade
import unittest
import datetime

"""
TESTS FOR ALL FUNCTIONALITIES RELATED TO UNDO/REDO FUNCTIONALITY
"""


class TestUndoRedoService(unittest.TestCase):
    def setUp(self) -> None:
        self.__valid_student = ValidatorStudent()
        self.__valid_assignment = ValidatorAssignment()
        self.__valid_grade = ValidatorGrade()
        self.__student_repo = StudentRepository()
        self.__assignment_repo = AssignmentRepository()
        self.__grade_repo = GradeRepository()
        self.__student_service = StudentService(self.__student_repo, self.__valid_student)
        self.__assignment_service = AssignmentService(self.__assignment_repo, self.__valid_assignment)
        self.__grade_service = GradeService(self.__grade_repo, self.__valid_grade, self.__student_repo, self.__assignment_repo)
        self.__undo_redo_service = UndoRedoService(self.__student_service, self.__assignment_service, self.__grade_service)

    def tearDown(self) -> None:
        pass

    def test_add_to_undo_list(self):
        self.assertEqual(len(self.__undo_redo_service.undo), 0)
        self.__undo_redo_service.add_to_undo_list("add_student", Student(12, 'Ana', 913))
        self.assertEqual(len(self.__undo_redo_service.undo), 1)

    def test_add_to_redo_list(self):
        self.assertEqual(len(self.__undo_redo_service.redo), 0)
        self.__undo_redo_service.add_to_redo_list("add_student", Student(12, 'Ana', 913))
        self.assertEqual(len(self.__undo_redo_service.redo), 1)

    def test_undo_handler(self):
        stud_id = 25
        name = 'Marcel'
        student = Student(stud_id, name, 915)
        self.__student_repo.add_student(student)
        assign_id = 99
        desc = 'problem 2'
        deadline = datetime.date(2010, 12, 14)
        deadline = deadline.strftime('%d/%m/%Y')
        assignment = Assignment(assign_id, desc, deadline)
        self.__assignment_repo.add_assignment(assignment)
        with self.assertRaises(Exception) as e:
            self.__undo_redo_service.undo_handler()
        self.assertEqual(str(e.exception), "No operation to undo!")
        self.__undo_redo_service.add_to_undo_list("add_student", student)
        self.assertEqual(len(self.__undo_redo_service.undo), 1)
        self.assertEqual(len(self.__undo_redo_service.undo_saved), 0)
        self.__undo_redo_service.add_to_undo_list("add_assignment", assignment)
        self.assertEqual(len(self.__undo_redo_service.undo), 2)
        self.assertEqual(len(self.__undo_redo_service.undo_saved), 0)
        self.__undo_redo_service.undo_handler()
        self.assertEqual(len(self.__undo_redo_service.undo), 1)
        self.assertEqual(len(self.__undo_redo_service.undo_saved), 1)
        self.assertEqual(len(self.__undo_redo_service.redo), 0)
        self.assertEqual(len(self.__undo_redo_service.redo_saved), 0)
        self.__undo_redo_service.undo_handler()
        self.assertEqual(len(self.__undo_redo_service.undo), 0)
        self.assertEqual(len(self.__undo_redo_service.undo_saved), 2)
        self.assertEqual(len(self.__undo_redo_service.redo), 0)
        self.assertEqual(len(self.__undo_redo_service.redo_saved), 0)

    def test_redo_handler(self):
        stud_id = 25
        name = 'Marcel'
        student = Student(stud_id, name, 915)
        self.__student_repo.add_student(student)
        assign_id = 99
        desc = 'problem 2'
        deadline = datetime.date(2010, 12, 14)
        deadline = deadline.strftime('%d/%m/%Y')
        assignment = Assignment(assign_id, desc, deadline)
        self.__assignment_repo.add_assignment(assignment)
        with self.assertRaises(Exception) as e:
            self.__undo_redo_service.redo_handler()
        self.assertEqual(str(e.exception), "No operation to redo!")
        self.__undo_redo_service.add_to_undo_list("add_student", student)
        self.assertEqual(len(self.__undo_redo_service.undo), 1)
        self.assertEqual(len(self.__undo_redo_service.undo_saved), 0)
        self.__undo_redo_service.add_to_undo_list("add_assignment", assignment)
        self.assertEqual(len(self.__undo_redo_service.undo), 2)
        self.assertEqual(len(self.__undo_redo_service.undo_saved), 0)

        self.__undo_redo_service.add_to_redo_list("add_student", student)
        self.assertEqual(len(self.__undo_redo_service.redo), 1)
        self.assertEqual(len(self.__undo_redo_service.redo_saved), 0)
        self.__undo_redo_service.add_to_redo_list("add_assignment", assignment)
        self.assertEqual(len(self.__undo_redo_service.redo), 2)
        self.assertEqual(len(self.__undo_redo_service.redo_saved), 0)

        self.__undo_redo_service.undo_handler()
        self.assertEqual(len(self.__undo_redo_service.undo), 1)
        self.assertEqual(len(self.__undo_redo_service.undo_saved), 1)
        self.assertEqual(len(self.__undo_redo_service.redo), 2)
        self.assertEqual(len(self.__undo_redo_service.redo_saved), 0)

        self.__undo_redo_service.redo_handler()
        self.assertEqual(len(self.__undo_redo_service.redo), 1)
        self.assertEqual(len(self.__undo_redo_service.redo_saved), 1)
        self.assertEqual(len(self.__undo_redo_service.undo), 2)
        self.assertEqual(len(self.__undo_redo_service.undo_saved), 0)

        self.__undo_redo_service.undo_handler()
        self.assertEqual(len(self.__undo_redo_service.redo), 2)
        self.assertEqual(len(self.__undo_redo_service.redo_saved), 0)
        self.assertEqual(len(self.__undo_redo_service.undo), 1)
        self.assertEqual(len(self.__undo_redo_service.undo_saved), 1)

    def test_undo_add_student(self):
        self.assertEqual(self.__student_service.no_of_students(), 0)
        self.__student_service.add_student_run(12, 'Ana', 916)
        self.assertEqual(self.__student_service.no_of_students(), 1)
        self.__undo_redo_service.add_to_undo_list("add_student", Student(12, 'Ana', 916))
        self.__undo_redo_service.undo_handler()
        self.assertEqual(self.__student_service.no_of_students(), 0)

    def test_undo_remove_student(self):
        self.assertEqual(self.__student_service.no_of_students(), 0)
        self.__student_service.add_student_run(12, 'Ana', 916)
        self.assertEqual(self.__student_service.no_of_students(), 1)
        self.__student_service.remove_student_run(12)
        self.assertEqual(self.__student_service.no_of_students(), 0)
        self.__undo_redo_service.add_to_undo_list("remove_student", Student(12, 'Ana', 916))
        self.__undo_redo_service.undo_handler()
        self.assertEqual(self.__student_service.no_of_students(), 1)

    def test_undo_add_assignment(self):
        self.assertEqual(self.__assignment_service.no_of_assignments(), 0)
        deadline = datetime.date(2010, 12, 14)
        deadline = deadline.strftime('%d/%m/%Y')
        self.__assignment_service.add_assignment_run(1, 'problem 5', deadline)
        self.assertEqual(self.__assignment_service.no_of_assignments(), 1)
        self.__undo_redo_service.add_to_undo_list("add_assignment", Assignment(1, 'problem 5', deadline))
        self.__undo_redo_service.undo_handler()
        self.assertEqual(self.__assignment_service.no_of_assignments(), 0)

    def test_undo_remove_assignment(self):
        self.assertEqual(self.__assignment_service.no_of_assignments(), 0)
        deadline = datetime.date(2010, 12, 14)
        deadline = deadline.strftime('%d/%m/%Y')
        self.__assignment_service.add_assignment_run(1, 'problem 5', deadline)
        self.assertEqual(self.__assignment_service.no_of_assignments(), 1)
        self.__assignment_service.remove_assignment_run(1)
        self.assertEqual(self.__assignment_service.no_of_assignments(), 0)
        self.__undo_redo_service.add_to_undo_list("remove_assignment", Assignment(1, 'problem 5', deadline))
        self.__undo_redo_service.undo_handler()
        self.assertEqual(self.__assignment_service.no_of_assignments(), 1)

    def test_undo_cascade_remove_student(self):
        student = Student(24, 'Gigel', 912)
        self.__student_repo.add_student(student)
        self.assertEqual(self.__student_service.no_of_students(), 1)
        self.__undo_redo_service.add_to_undo_list("add_student", student)
        deadline = datetime.date(2010, 12, 14)
        deadline = deadline.strftime('%d/%m/%Y')
        assignment = Assignment(99, 'problem 2', deadline)
        self.__assignment_repo.add_assignment(assignment)
        self.__undo_redo_service.add_to_undo_list("add_assignment", assignment)
        self.assertEqual(self.__grade_service.no_of_grades(), 0)
        self.__grade_service.assign_to_student(99, 24)
        self.__undo_redo_service.add_to_undo_list("give_student", Grade(99, 24))
        self.assertEqual(self.__grade_service.no_of_grades(), 1)
        self.__student_service.remove_student_run(24)
        self.__undo_redo_service.add_to_undo_list("remove_student", student)
        last_op = self.__grade_service.remove_student_and_assignments(student, 24)
        self.__undo_redo_service.add_to_undo_list("cascade_remove", last_op[0])
        self.assertEqual(self.__student_service.no_of_students(), 0)
        self.assertEqual(self.__grade_service.no_of_grades(), 0)
        self.__undo_redo_service.undo_handler()
        self.assertEqual(self.__student_service.no_of_students(), 1)
        self.assertEqual(self.__grade_service.no_of_grades(), 1)

    def test_undo_cascade_remove_assignment(self):
        student = Student(24, 'Gigel', 912)
        self.__student_repo.add_student(student)
        self.__undo_redo_service.add_to_undo_list("add_student", student)
        deadline = datetime.date(2010, 12, 14)
        deadline = deadline.strftime('%d/%m/%Y')
        assignment = Assignment(99, 'problem 2', deadline)
        self.__assignment_repo.add_assignment(assignment)
        self.assertEqual(self.__assignment_service.no_of_assignments(), 1)
        self.__undo_redo_service.add_to_undo_list("add_assignment", assignment)
        self.assertEqual(self.__grade_service.no_of_grades(), 0)
        self.__grade_service.assign_to_student(99, 24)
        self.__undo_redo_service.add_to_undo_list("give_student", Grade(99, 24))
        self.assertEqual(self.__grade_service.no_of_grades(), 1)
        self.__assignment_service.remove_assignment_run(99)
        self.__undo_redo_service.add_to_undo_list("remove_assignment", assignment)
        last_op = self.__grade_service.remove_assignment_and_students(assignment, 99)
        self.__undo_redo_service.add_to_undo_list("cascade_remove", last_op[0])
        self.assertEqual(self.__assignment_service.no_of_assignments(), 0)
        self.assertEqual(self.__grade_service.no_of_grades(), 0)
        self.__undo_redo_service.undo_handler()
        self.assertEqual(self.__assignment_service.no_of_assignments(), 1)
        self.assertEqual(self.__grade_service.no_of_grades(), 1)

    def test_undo_update_student_name(self):
        student = Student(24, 'Gigel', 912)
        self.__student_repo.add_student(student)
        self.__undo_redo_service.add_to_undo_list("add_student", Student(24, 'Gigel', 912))
        stud = self.__student_service.repo.search_by_id(24)
        self.assertEqual(stud.name, 'Gigel')
        self.__student_service.update_student_name_run(24, 'Ionel')
        stud = self.__student_service.repo.search_by_id(24)
        self.assertEqual(stud.name, 'Ionel')
        self.__undo_redo_service.add_to_undo_list("update_student_name", Student(24, 'Gigel', 912))
        self.__undo_redo_service.undo_handler()
        stud = self.__student_service.repo.search_by_id(24)
        self.assertEqual(stud.name, 'Gigel')

    def test_undo_update_student_group(self):
        student = Student(24, 'Gigel', 912)
        self.__student_repo.add_student(student)
        self.__undo_redo_service.add_to_undo_list("add_student", Student(24, 'Gigel', 912))
        stud = self.__student_service.repo.search_by_id(24)
        self.assertEqual(int(stud.group), 912)
        self.__student_service.update_student_group_run(24, 914)
        stud = self.__student_service.repo.search_by_id(24)
        self.assertEqual(int(stud.group), 914)
        self.__undo_redo_service.add_to_undo_list("update_student_group", Student(24, 'Gigel', 912))
        self.__undo_redo_service.undo_handler()
        stud = self.__student_service.repo.search_by_id(24)
        self.assertEqual(int(stud.group), 912)

    def test_undo_update_assignment_description(self):
        deadline = datetime.date(2010, 12, 14)
        deadline = deadline.strftime('%d/%m/%Y')
        assignment = Assignment(99, 'problem 2', deadline)
        self.__assignment_repo.add_assignment(assignment)
        self.__undo_redo_service.add_to_undo_list("add_assignment", Assignment(99, 'problem 2', deadline))
        assign = self.__assignment_service.repo.search_by_id(99)
        self.assertEqual(assign.description, 'problem 2')
        self.__assignment_service.update_assignment_description_run(99, 'problem 222')
        assign = self.__assignment_service.repo.search_by_id(99)
        self.assertEqual(assign.description, 'problem 222')
        self.__undo_redo_service.add_to_undo_list("update_assignment_description", Assignment(99, 'problem 2', deadline))
        self.__undo_redo_service.undo_handler()
        assign = self.__assignment_service.repo.search_by_id(99)
        self.assertEqual(assign.description, 'problem 2')

    def test_undo_update_assignment_deadline(self):
        deadline = datetime.date(2010, 12, 14)
        deadline = deadline.strftime('%d/%m/%Y')
        new_deadline = datetime.date(2011, 11, 2)
        new_deadline = new_deadline.strftime('%d/%m/%Y')
        assignment = Assignment(99, 'problem 2', deadline)
        self.__assignment_repo.add_assignment(assignment)
        self.__undo_redo_service.add_to_undo_list("add_assignment", Assignment(99, 'problem 2', deadline))
        assign = self.__assignment_service.repo.search_by_id(99)
        self.assertEqual(assign.deadline, deadline)
        self.__assignment_service.update_assignment_deadline_run(99, new_deadline)
        assign = self.__assignment_service.repo.search_by_id(99)
        self.assertEqual(assign.deadline, new_deadline)
        self.__undo_redo_service.add_to_undo_list("update_assignment_deadline", Assignment(99, 'problem 2', deadline))
        self.__undo_redo_service.undo_handler()
        assign = self.__assignment_service.repo.search_by_id(99)
        self.assertEqual(assign.deadline, deadline)

    def test_undo_grade_student(self):
        student = Student(25, 'Marcel', 912)
        self.__student_repo.add_student(student)
        self.__undo_redo_service.add_to_undo_list("add_student", student)
        deadline = datetime.date(2010, 12, 14)
        deadline = deadline.strftime('%d/%m/%Y')
        assignment = Assignment(99, 'problem 99', deadline)
        self.__assignment_repo.add_assignment(assignment)
        self.__undo_redo_service.add_to_undo_list("add_assignment", assignment)
        self.__grade_service.assign_to_student(99, 25)
        self.__undo_redo_service.add_to_undo_list("give_student", Grade(99, 25))
        self.__grade_service.grade_student(25, 99, 10)
        self.__undo_redo_service.add_to_undo_list("grade_student", Grade(99, 25, 10))
        grade = self.__grade_repo.search_student_and_assignment(25, 99)
        self.assertEqual(float(grade.grade_value), 10)
        self.__undo_redo_service.undo_handler()
        grade = self.__grade_repo.search_student_and_assignment(25, 99)
        self.assertEqual(float(grade.grade_value), -1)

    def test_undo_assign_to_student(self):
        student = Student(25, 'Marcel', 912)
        self.__student_repo.add_student(student)
        self.__undo_redo_service.add_to_undo_list("add_student", student)
        deadline = datetime.date(2010, 12, 14)
        deadline = deadline.strftime('%d/%m/%Y')
        assignment = Assignment(99, 'problem 99', deadline)
        self.__assignment_repo.add_assignment(assignment)
        self.__undo_redo_service.add_to_undo_list("add_assignment", assignment)
        self.assertEqual(self.__grade_service.no_of_grades(), 0)
        self.__grade_service.assign_to_student(99, 25)
        self.__undo_redo_service.add_to_undo_list("give_student", Grade(99, 25))
        self.assertEqual(self.__grade_service.no_of_grades(), 1)
        self.__undo_redo_service.undo_handler()
        self.assertEqual(self.__grade_service.no_of_grades(), 0)

    def test_undo_assign_to_group(self):
        student = Student(25, 'Marcel', 912)
        self.__student_repo.add_student(student)
        self.__undo_redo_service.add_to_undo_list("add_student", student)
        student = Student(26, 'Haha', 912)
        self.__student_repo.add_student(student)
        self.__undo_redo_service.add_to_undo_list("add_student", student)
        deadline = datetime.date(2010, 12, 14)
        deadline = deadline.strftime('%d/%m/%Y')
        assignment = Assignment(99, 'problem 99', deadline)
        self.__assignment_repo.add_assignment(assignment)
        self.__undo_redo_service.add_to_undo_list("add_assignment", assignment)
        self.assertEqual(self.__grade_service.no_of_grades(), 0)
        self.__grade_service.assign_to_group(99, 912)
        self.__undo_redo_service.add_to_undo_list("give_group", (99, 912))
        self.assertEqual(self.__grade_service.no_of_grades(), 2)
        self.__undo_redo_service.undo_handler()
        self.assertEqual(self.__grade_service.no_of_grades(), 0)

    def test_undo_delete_grade(self):
        self.assertEqual(self.__grade_service.no_of_grades(), 0)
        self.__grade_repo.add_grade(Grade(1, 1, 9.7))
        self.assertEqual(self.__grade_service.no_of_grades(), 1)
        self.__grade_repo.remove_grade(Grade(1, 1, 9.7))
        self.assertEqual(self.__grade_service.no_of_grades(), 0)
        self.__undo_redo_service.add_to_undo_list("add_grade", Grade(1, 1, 9.7))
        self.__undo_redo_service.undo_handler()
        self.assertEqual(self.__grade_service.no_of_grades(), 1)

    def test_redo_add_student(self):
        self.assertEqual(self.__student_service.no_of_students(), 0)
        self.__student_service.add_student_run(12, 'Ana', 916)
        self.assertEqual(self.__student_service.no_of_students(), 1)
        self.__undo_redo_service.add_to_undo_list("add_student", Student(12, 'Ana', 916))
        self.__undo_redo_service.add_to_redo_list("add_student", Student(12, 'Ana', 916))
        self.__undo_redo_service.undo_handler()
        self.assertEqual(self.__student_service.no_of_students(), 0)
        self.__undo_redo_service.redo_handler()
        self.assertEqual(self.__student_service.no_of_students(), 1)

    def test_redo_add_assignment(self):
        self.assertEqual(self.__assignment_service.no_of_assignments(), 0)
        deadline = datetime.date(2010, 12, 14)
        deadline = deadline.strftime('%d/%m/%Y')
        self.__assignment_service.add_assignment_run(1, 'problem 5', deadline)
        self.assertEqual(self.__assignment_service.no_of_assignments(), 1)
        self.__undo_redo_service.add_to_undo_list("add_assignment", Assignment(1, 'problem 5', deadline))
        self.__undo_redo_service.add_to_redo_list("add_assignment", Assignment(1, 'problem 5', deadline))
        self.__undo_redo_service.undo_handler()
        self.assertEqual(self.__assignment_service.no_of_assignments(), 0)
        self.__undo_redo_service.redo_handler()
        self.assertEqual(self.__assignment_service.no_of_assignments(), 1)

    def test_redo_remove_student(self):
        self.assertEqual(self.__student_service.no_of_students(), 0)
        self.__student_service.add_student_run(12, 'Ana', 916)
        self.__undo_redo_service.add_to_undo_list("add_student", Student(12, 'Ana', 916))
        self.__undo_redo_service.add_to_redo_list("add_student", Student(12, 'Ana', 916))
        self.assertEqual(self.__student_service.no_of_students(), 1)
        self.__student_service.remove_student_run(12)
        self.assertEqual(self.__student_service.no_of_students(), 0)
        self.__undo_redo_service.add_to_undo_list("remove_student", Student(12, 'Ana', 916))
        self.__undo_redo_service.add_to_redo_list("remove_student", Student(12, 'Ana', 916))
        self.__undo_redo_service.undo_handler()
        self.assertEqual(self.__student_service.no_of_students(), 1)
        self.__undo_redo_service.redo_handler()
        self.assertEqual(self.__student_service.no_of_students(), 0)

    def test_redo_remove_assignment(self):
        self.assertEqual(self.__assignment_service.no_of_assignments(), 0)
        deadline = datetime.date(2010, 12, 14)
        deadline = deadline.strftime('%d/%m/%Y')
        self.__assignment_service.add_assignment_run(99, 'problem 2', deadline)
        self.__undo_redo_service.add_to_undo_list("add_assignment", Assignment(99, 'problem 2', deadline))
        self.__undo_redo_service.add_to_redo_list("add_assignment", Assignment(99, 'problem 2', deadline))
        self.assertEqual(self.__assignment_service.no_of_assignments(), 1)
        self.__assignment_service.remove_assignment_run(99)
        self.assertEqual(self.__assignment_service.no_of_assignments(), 0)
        self.__undo_redo_service.add_to_undo_list("remove_assignment", Assignment(99, 'problem 2', deadline))
        self.__undo_redo_service.add_to_redo_list("remove_assignment", Assignment(99, 'problem 2', deadline))
        self.__undo_redo_service.undo_handler()
        self.assertEqual(self.__assignment_service.no_of_assignments(), 1)
        self.__undo_redo_service.redo_handler()
        self.assertEqual(self.__assignment_service.no_of_assignments(), 0)

    def test_redo_cascade_remove_student(self):
        student = Student(24, 'Gigel', 912)
        self.__student_repo.add_student(student)
        self.assertEqual(self.__student_service.no_of_students(), 1)
        self.__undo_redo_service.add_to_undo_list("add_student", student)
        self.__undo_redo_service.add_to_redo_list("add_student", student)
        deadline = datetime.date(2010, 12, 14)
        deadline = deadline.strftime('%d/%m/%Y')
        assignment = Assignment(99, 'problem 2', deadline)
        self.__assignment_repo.add_assignment(assignment)
        self.__undo_redo_service.add_to_undo_list("add_assignment", assignment)
        self.__undo_redo_service.add_to_redo_list("add_assignment", assignment)
        self.assertEqual(self.__grade_service.no_of_grades(), 0)
        self.__grade_service.assign_to_student(99, 24)
        self.__undo_redo_service.add_to_undo_list("give_student", Grade(99, 24))
        self.__undo_redo_service.add_to_redo_list("give_student", Grade(99, 24))
        self.assertEqual(self.__grade_service.no_of_grades(), 1)
        self.__student_service.remove_student_run(24)
        self.__undo_redo_service.add_to_undo_list("remove_student", student)
        self.__undo_redo_service.add_to_redo_list("remove_student", student)
        last_op = self.__grade_service.remove_student_and_assignments(student, 24)
        self.__undo_redo_service.add_to_undo_list("cascade_remove", last_op[0])
        self.__undo_redo_service.add_to_redo_list("cascade_remove", last_op[1])
        self.assertEqual(self.__student_service.no_of_students(), 0)
        self.assertEqual(self.__grade_service.no_of_grades(), 0)
        self.__undo_redo_service.undo_handler()
        self.assertEqual(self.__student_service.no_of_students(), 1)
        self.assertEqual(self.__grade_service.no_of_grades(), 1)
        self.__undo_redo_service.redo_handler()
        self.assertEqual(self.__student_service.no_of_students(), 0)
        self.assertEqual(self.__grade_service.no_of_grades(), 0)

    def test_redo_cascade_remove_assignment(self):
        student = Student(24, 'Gigel', 912)
        self.__student_repo.add_student(student)
        self.__undo_redo_service.add_to_undo_list("add_student", student)
        self.__undo_redo_service.add_to_redo_list("add_student", student)
        deadline = datetime.date(2010, 12, 14)
        deadline = deadline.strftime('%d/%m/%Y')
        assignment = Assignment(99, 'problem 2', deadline)
        self.__assignment_repo.add_assignment(assignment)
        self.assertEqual(self.__assignment_service.no_of_assignments(), 1)
        self.__undo_redo_service.add_to_undo_list("add_assignment", assignment)
        self.__undo_redo_service.add_to_redo_list("add_assignment", assignment)
        self.assertEqual(self.__grade_service.no_of_grades(), 0)
        self.__grade_service.assign_to_student(99, 24)
        self.__undo_redo_service.add_to_undo_list("give_student", Grade(99, 24))
        self.__undo_redo_service.add_to_redo_list("give_student", Grade(99, 24))
        self.assertEqual(self.__grade_service.no_of_grades(), 1)
        self.__assignment_service.remove_assignment_run(99)
        self.__undo_redo_service.add_to_undo_list("remove_assignment", assignment)
        self.__undo_redo_service.add_to_redo_list("remove_assignment", assignment)
        last_op = self.__grade_service.remove_assignment_and_students(assignment, 99)
        self.__undo_redo_service.add_to_undo_list("cascade_remove", last_op[0])
        self.__undo_redo_service.add_to_redo_list("cascade_remove", last_op[1])
        self.assertEqual(self.__assignment_service.no_of_assignments(), 0)
        self.assertEqual(self.__grade_service.no_of_grades(), 0)
        self.__undo_redo_service.undo_handler()
        self.assertEqual(self.__assignment_service.no_of_assignments(), 1)
        self.assertEqual(self.__grade_service.no_of_grades(), 1)
        self.__undo_redo_service.redo_handler()
        self.assertEqual(self.__assignment_service.no_of_assignments(), 0)
        self.assertEqual(self.__grade_service.no_of_grades(), 0)

    def test_redo_update_student_name(self):
        student = Student(24, 'Gigel', 912)
        self.__student_repo.add_student(student)
        self.__undo_redo_service.add_to_undo_list("add_student", Student(24, 'Gigel', 912))
        self.__undo_redo_service.add_to_redo_list("add_student", Student(24, 'Gigel', 912))
        stud = self.__student_service.repo.search_by_id(24)
        self.assertEqual(stud.name, 'Gigel')
        self.__student_service.update_student_name_run(24, 'Ionel')
        stud = self.__student_service.repo.search_by_id(24)
        self.assertEqual(stud.name, 'Ionel')
        self.__undo_redo_service.add_to_undo_list("update_student_name", Student(24, 'Gigel', 912))
        self.__undo_redo_service.add_to_redo_list("update_student_name", Student(24, 'Ionel', 912))
        self.__undo_redo_service.undo_handler()
        stud = self.__student_service.repo.search_by_id(24)
        self.assertEqual(stud.name, 'Gigel')
        self.__undo_redo_service.redo_handler()
        stud = self.__student_service.repo.search_by_id(24)
        self.assertEqual(stud.name, 'Ionel')

    def test_redo_update_student_group(self):
        student = Student(24, 'Gigel', 912)
        self.__student_repo.add_student(student)
        self.__undo_redo_service.add_to_undo_list("add_student", Student(24, 'Gigel', 912))
        self.__undo_redo_service.add_to_redo_list("add_student", Student(24, 'Gigel', 912))
        stud = self.__student_service.repo.search_by_id(24)
        self.assertEqual(int(stud.group), 912)
        self.__student_service.update_student_group_run(24, 914)
        stud = self.__student_service.repo.search_by_id(24)
        self.assertEqual(int(stud.group), 914)
        self.__undo_redo_service.add_to_undo_list("update_student_group", Student(24, 'Gigel', 912))
        self.__undo_redo_service.add_to_redo_list("update_student_group", Student(24, 'Gigel', 914))
        self.__undo_redo_service.undo_handler()
        stud = self.__student_service.repo.search_by_id(24)
        self.assertEqual(int(stud.group), 912)
        self.__undo_redo_service.redo_handler()
        stud = self.__student_service.repo.search_by_id(24)
        self.assertEqual(int(stud.group), 914)

    def test_redo_update_assignment_description(self):
        deadline = datetime.date(2010, 12, 14)
        deadline = deadline.strftime('%d/%m/%Y')
        assignment = Assignment(99, 'problem 2', deadline)
        self.__assignment_repo.add_assignment(assignment)
        self.__undo_redo_service.add_to_undo_list("add_assignment", Assignment(99, 'problem 2', deadline))
        self.__undo_redo_service.add_to_redo_list("add_assignment", Assignment(99, 'problem 2', deadline))
        assign = self.__assignment_service.repo.search_by_id(99)
        self.assertEqual(assign.description, 'problem 2')
        self.__assignment_service.update_assignment_description_run(99, 'problem 222')
        assign = self.__assignment_service.repo.search_by_id(99)
        self.assertEqual(assign.description, 'problem 222')
        self.__undo_redo_service.add_to_undo_list("update_assignment_description", Assignment(99, 'problem 2', deadline))
        self.__undo_redo_service.add_to_redo_list("update_assignment_description", Assignment(99, 'problem 222', deadline))
        self.__undo_redo_service.undo_handler()
        assign = self.__assignment_service.repo.search_by_id(99)
        self.assertEqual(assign.description, 'problem 2')
        self.__undo_redo_service.redo_handler()
        assign = self.__assignment_service.repo.search_by_id(99)
        self.assertEqual(assign.description, 'problem 222')

    def test_redo_update_assignment_deadline(self):
        deadline = datetime.date(2010, 12, 14)
        deadline = deadline.strftime('%d/%m/%Y')
        new_deadline = datetime.date(2011, 11, 2)
        new_deadline = new_deadline.strftime('%d/%m/%Y')
        assignment = Assignment(99, 'problem 2', deadline)
        self.__assignment_repo.add_assignment(assignment)
        self.__undo_redo_service.add_to_undo_list("add_assignment", Assignment(99, 'problem 2', deadline))
        self.__undo_redo_service.add_to_redo_list("add_assignment", Assignment(99, 'problem 2', deadline))
        assign = self.__assignment_service.repo.search_by_id(99)
        self.assertEqual(assign.deadline, deadline)
        self.__assignment_service.update_assignment_deadline_run(99, new_deadline)
        assign = self.__assignment_service.repo.search_by_id(99)
        self.assertEqual(assign.deadline, new_deadline)
        self.__undo_redo_service.add_to_undo_list("update_assignment_deadline", Assignment(99, 'problem 2', deadline))
        self.__undo_redo_service.add_to_redo_list("update_assignment_deadline", Assignment(99, 'problem 2', new_deadline))
        self.__undo_redo_service.undo_handler()
        assign = self.__assignment_service.repo.search_by_id(99)
        self.assertEqual(assign.deadline, deadline)
        self.__undo_redo_service.redo_handler()
        assign = self.__assignment_service.repo.search_by_id(99)
        self.assertEqual(assign.deadline, new_deadline)

    def test_redo_assign_to_student(self):
        student = Student(25, 'Marcel', 912)
        self.__student_repo.add_student(student)
        self.__undo_redo_service.add_to_undo_list("add_student", student)
        self.__undo_redo_service.add_to_redo_list("add_student", student)
        deadline = datetime.date(2010, 12, 14)
        deadline = deadline.strftime('%d/%m/%Y')
        assignment = Assignment(99, 'problem 99', deadline)
        self.__assignment_repo.add_assignment(assignment)
        self.__undo_redo_service.add_to_undo_list("add_assignment", assignment)
        self.__undo_redo_service.add_to_redo_list("add_assignment", assignment)
        self.assertEqual(self.__grade_service.no_of_grades(), 0)
        self.__grade_service.assign_to_student(99, 25)
        self.__undo_redo_service.add_to_undo_list("give_student", Grade(99, 25))
        self.__undo_redo_service.add_to_redo_list("give_student", Grade(99, 25))
        self.assertEqual(self.__grade_service.no_of_grades(), 1)
        self.__undo_redo_service.undo_handler()
        self.assertEqual(self.__grade_service.no_of_grades(), 0)
        self.__undo_redo_service.redo_handler()
        self.assertEqual(self.__grade_service.no_of_grades(), 1)

    def test_redo_assign_to_group(self):
        student = Student(25, 'Marcel', 912)
        self.__student_repo.add_student(student)
        self.__undo_redo_service.add_to_undo_list("add_student", student)
        self.__undo_redo_service.add_to_redo_list("add_student", student)
        student = Student(26, 'Haha', 912)
        self.__student_repo.add_student(student)
        self.__undo_redo_service.add_to_undo_list("add_student", student)
        self.__undo_redo_service.add_to_redo_list("add_student", student)
        deadline = datetime.date(2010, 12, 14)
        deadline = deadline.strftime('%d/%m/%Y')
        assignment = Assignment(99, 'problem 99', deadline)
        self.__assignment_repo.add_assignment(assignment)
        self.__undo_redo_service.add_to_undo_list("add_assignment", assignment)
        self.__undo_redo_service.add_to_redo_list("add_assignment", assignment)
        self.assertEqual(self.__grade_service.no_of_grades(), 0)
        self.__grade_service.assign_to_group(99, 912)
        self.__undo_redo_service.add_to_undo_list("give_group", (99, 912))
        self.__undo_redo_service.add_to_redo_list("give_group", (99, 912))
        self.assertEqual(self.__grade_service.no_of_grades(), 2)
        self.__undo_redo_service.undo_handler()
        self.assertEqual(self.__grade_service.no_of_grades(), 0)
        self.__undo_redo_service.redo_handler()
        self.assertEqual(self.__grade_service.no_of_grades(), 2)

    def test_redo_grade_student(self):
        student = Student(25, 'Marcel', 912)
        self.__student_repo.add_student(student)
        self.__undo_redo_service.add_to_undo_list("add_student", student)
        self.__undo_redo_service.add_to_redo_list("add_student", student)
        deadline = datetime.date(2010, 12, 14)
        deadline = deadline.strftime('%d/%m/%Y')
        assignment = Assignment(99, 'problem 99', deadline)
        self.__assignment_repo.add_assignment(assignment)
        self.__undo_redo_service.add_to_undo_list("add_assignment", assignment)
        self.__undo_redo_service.add_to_redo_list("add_assignment", assignment)
        self.__grade_service.assign_to_student(99, 25)
        self.__undo_redo_service.add_to_undo_list("give_student", Grade(99, 25))
        self.__undo_redo_service.add_to_redo_list("give_student", Grade(99, 25))
        self.__grade_service.grade_student(25, 99, 10)
        self.__undo_redo_service.add_to_undo_list("grade_student", Grade(99, 25, 10))
        self.__undo_redo_service.add_to_redo_list("grade_student", Grade(99, 25, 10))
        grade = self.__grade_repo.search_student_and_assignment(25, 99)
        self.assertEqual(float(grade.grade_value), 10)
        self.__undo_redo_service.undo_handler()
        grade = self.__grade_repo.search_student_and_assignment(25, 99)
        self.assertEqual(float(grade.grade_value), -1)
        self.__undo_redo_service.redo_handler()
        grade = self.__grade_repo.search_student_and_assignment(25, 99)
        self.assertEqual(float(grade.grade_value), 10)

    def test_redo_delete_grade(self):
        self.assertEqual(self.__grade_service.no_of_grades(), 0)
        self.__grade_repo.add_grade(Grade(1, 1, 9.7))
        self.assertEqual(self.__grade_service.no_of_grades(), 1)
        self.__grade_repo.remove_grade(Grade(1, 1, 9.7))
        self.assertEqual(self.__grade_service.no_of_grades(), 0)
        self.__undo_redo_service.add_to_undo_list("add_grade", Grade(1, 1, 9.7))
        self.__undo_redo_service.add_to_redo_list("add_grade", Grade(1, 1, 9.7))
        self.__undo_redo_service.undo_handler()
        self.assertEqual(self.__grade_service.no_of_grades(), 1)
        self.__undo_redo_service.redo_handler()
        self.assertEqual(self.__grade_service.no_of_grades(), 0)
